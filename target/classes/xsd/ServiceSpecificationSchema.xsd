<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ServiceSpecificationSchema="http://efficiensea2.org/maritime-cloud/service-registry/v1/ServiceSpecificationSchema.xsd" targetNamespace="http://efficiensea2.org/maritime-cloud/service-registry/v1/ServiceSpecificationSchema.xsd" elementFormDefault="qualified" version="1.0.2" xml:lang="EN">
    <include schemaLocation="ServiceBaseTypesSchema.xsd"/>
    <annotation>
        <documentation>
            Authors:
            EfficienSea2 WP 3 Partners
            Thomas Lutz
            Christoph Rihacek
            Josef Jahn
            Hubert Künig
        </documentation>
    </annotation>
    <annotation>
        <documentation>
            This formal description of a service specification is intentionally kept
            simple and plain.
            For all described objects lots of more attributes and related objects could
            be added and standardized, but in order to get as much adoption as possible
            the entry barrier should be low and therefore quite some aspects e.g. like
            when a service would be available have been left out.
        </documentation>
    </annotation>
    <element name="serviceSpecification" type="ServiceSpecificationSchema:ServiceSpecification">
        <annotation>
            <documentation>
                The root element of a service specification.
                Please refer to the type serviceSpecification for details.
            </documentation>
        </annotation>
    </element>
    <complexType name="ServiceSpecification">
        <annotation>
            <documentation>
                A service specification describes one dedicated service at logical level in a technology-independent
                way.
                The service specification identifies a service by its id and version. The service specification
                refers to requirements for the service, defines a service data model at logical level,
                defines the service interface(s) and provides information about the author(s).

                Elements of a service specification are:

                - name              The human readable service name. The service name should be at maximum a one
                line brief label for the service. Newer versions of the same service
                specification should not change the name.

                - id                Globally unique identification of the service. Newer versions of the same
                service specification shall not change the id.

                - version           Version of the service specification. A service specification is uniquely
                identified by its id and version. Any change in the service data model or in the
                service interface definition requires a new version of the service specification.

                - status			Status of the service specification. One of the values 'provisional', 'released',
                'deprecated', 'deleted'.

                - description       A human readable short description of the service. The description shall contain
                an abstract of what a service implementing this specification would actually do.

                - keywords          A list of keywords associated to the service.

                - isSpatialExclusive Flag to indicate whether the service shall be “spatial exclusive”. “Spatial
                exclusiveness” means that at most one service instance of the same service
                specification and providing the same technical specification is allowed to be
                registered for any geographical area.

                - requirements      Refers to requirements specifications for the service. Business requirements,
                functional and non-functional requirements should be listed here.
                At least one requirement is mandatory.

                - authorInfos       Refers to administrative information about the authors of the service. At least
                one author information is mandatory.

                - serviceInterfaces Refers to the definition of service interfaces. At least one service interface
                shall be defined.

                - serviceDataModel  Mandatory reference to the definition of the logical service data model.
            </documentation>
        </annotation>
        <all>
            <element name="id" type="ServiceSpecificationSchema:ServiceIdentifier" minOccurs="1" maxOccurs="1"/>
            <element name="version" type="ServiceSpecificationSchema:ServiceVersion" minOccurs="1" maxOccurs="1"/>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="status" type="ServiceSpecificationSchema:ServiceStatus" minOccurs="1" maxOccurs="1"/>
            <element name="description" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="keywords" type="string" minOccurs="0" maxOccurs="1"/>
            <element name="isSpatialExclusive" type="boolean" default="false" minOccurs="0" maxOccurs="1"/>
            <element name="requirements" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="requirement" type="ServiceSpecificationSchema:Requirement" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
            <element name="authorInfos" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="authorInfo" type="ServiceSpecificationSchema:AuthorInfo" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
            <element name="serviceDataModel" type="ServiceSpecificationSchema:ServiceDataModel" minOccurs="1" maxOccurs="1"/>
            <element name="serviceInterfaces" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="serviceInterface" type="ServiceSpecificationSchema:ServiceInterface" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
        </all>
    </complexType>
    <complexType name="Requirement">
        <annotation>
            <documentation>
                A requirement that the service specification fulfils.

                Elements of a requirement are:

                - id        Globally unique requirement identification

                - name      Human readable requirement name/summary. Shall not be longer than one line.

                - text      The human readable requirement text. Usually formulated in form of a “shall”-statement.

                - rationale Rationale for this requirement. Textual explanation of why this requirement exists.
                Provides background information about the need of the service.

                - reference Optional information about where the requirement was originally stated. If the
                requirement comes from external documents, this attribute shall refer to this source.

                - author    Optional reference(s) to administrative information about the author(s) of the requirement.

            </documentation>
        </annotation>
        <all>
            <element name="id" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="text" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="rationale" type="string" minOccurs="0" maxOccurs="1"/>
            <element name="reference" type="string" minOccurs="0" maxOccurs="1"/>
            <element name="authorInfos" minOccurs="0" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="authorInfo" type="ServiceSpecificationSchema:AuthorInfo" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
        </all>
    </complexType>
    <complexType name="ServiceInterface">
        <annotation>
            <documentation>
                Specification of a service interface. One service can offer several interfaces,
                e.g. both a request/response interface and a publish/subscribe interface at the same time.
                Different interfaces will usually provide different service operations.

                Elements of a serviceInterface are:

                name                Human readable service interface name. The name shall be no longer than one line.

                description         Human readable description of the service interface

                dataExchangePattern Message exchange pattern can be one of
                ONE_WAY,
                REQUEST_RESPONSE,
                REQUEST_CALLBACK,
                PUBLISH_SUBSCRIBE,
                BROADCAST.

                operations          Refers to the specification of service operations supported by the service
                interface. At least one operation shall be defined.

                consumerInterfaces  Optional reference to an interface definition that has to be provided by the
                service consumer in order to complement the service interface.
                Especially if a publish/subscribe service interface is designed, it is
                necessary to describe what the service expects to be available on the
                subscriber side.

            </documentation>
        </annotation>
        <all>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="description" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="dataExchangePattern" minOccurs="1" maxOccurs="1">
                <simpleType>
                    <restriction base="string">
                        <enumeration value="ONE_WAY"/>
                        <enumeration value="REQUEST_RESPONSE"/>
                        <enumeration value="REQUEST_CALLBACK"/>
                        <enumeration value="PUBLISH_SUBSCRIBE"/>
                        <enumeration value="BROADCAST"/>
                    </restriction>
                </simpleType>
            </element>
            <element name="operations" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="operation" type="ServiceSpecificationSchema:Operation" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
            <element name="consumerInterface" type="ServiceSpecificationSchema:ConsumerInterface" minOccurs="0" maxOccurs="1"/>
        </all>
    </complexType>
    <complexType name="ConsumerInterface">
        <annotation>
            <documentation>
                Interface specification that is expected to be provided by the service consumer. For example,
                if a publish/subscribe service interface is designed, it is necessary to describe what the service
                expects to be available on the subscriber side.

                Elements of a consumerInterface are:

                - name        Human readable interface name. The name shall be no longer than one line.

                - description Human readable description of the interface.

                - operations  Refers to the specification of service operations supported by the consumer interface.
                At least one operation shall be defined.
            </documentation>
        </annotation>
        <all>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="description" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="operations" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="operation" type="ServiceSpecificationSchema:Operation" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
        </all>
    </complexType>
    <complexType name="Operation">
        <annotation>
            <documentation>
                Definition of a service operation. Operations allow a service consumer to interact with
                the service. An operation describes a dedicated function of the service or the consumer.

                Elements of an operation are:

                - name            Human readable operation name. The name shall be no longer than one line.

                - description     Human readable description of the operation.

                - returnValueType Optional definition of the return value for the operation. The return value
                could be a business object or a simple status code. The return value data type
                has to be defined in the logical service data model.

                - parameterTypes  Definition of one or more parameters for the operation. This could be business
                objects or simple types. Parameters have to be defined in the logical
                service data model.
            </documentation>
        </annotation>
        <all>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="description" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="returnValueType" type="ServiceSpecificationSchema:ValueTypeDataModelMapping" minOccurs="0" maxOccurs="1"/>
            <element name="parameterTypes" minOccurs="0" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="parameterType" type="ServiceSpecificationSchema:ValueTypeDataModelMapping" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
        </all>
    </complexType>
    <complexType name="ValueTypeDataModelMapping">
        <annotation>
            <documentation>
                Definition of a data type by providing a reference into the logical service data model.
                A value type data model mapping is used either in a service operation parameter or return value.

                Elements of a valueTypeDataModelMapping are:

                - typeReference  Reference to the logical service data model.
                It references a type (or element, though type is preferred) in the logical
                service model by the type's name attribute.
            </documentation>
        </annotation>
        <all>
            <element name="typeReference" type="string" minOccurs="1" maxOccurs="1"/>
        </all>
    </complexType>
    <complexType name="ServiceDataModel">
        <annotation>
            <documentation>
                The serviceDataModel is a logical model. It is formally described to achieve interoperability
                and decouple it from implementing physical data models described in e.g. SOAP or REST.
                The serviceDataModel is described in one of the two sub-elements:
                either in XSD format (definitionAsXSD)
                or in any another format, formulated in plaint text (definitionAsText).
                The model can either be described in-line, or existing schemata can be imported.
                Exactly one of the two optional sub-elements (definitionAsXSD or definitionAsText) has to be provided.

                Elements of a serviceDataModel are:

                - definitionAsXSD  The definition of the service data model described in XSD.
                - definitionAsText  The definition of the service data model described in text format.
            </documentation>
        </annotation>
        <all>
            <element name="definitionAsXSD" minOccurs="0" maxOccurs="1">
                <complexType>
                    <sequence>
                        <any namespace="http://www.w3.org/2001/XMLSchema" processContents="lax"/>
                    </sequence>
                </complexType>
            </element>
            <element name="definitionAsText" type="string" minOccurs="0" maxOccurs="1"/>
        </all>
    </complexType>
</schema>
