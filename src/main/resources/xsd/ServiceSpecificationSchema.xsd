<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:ServiceSpecificationSchema="http://iala-aism.org/g1128/v1.3/ServiceSpecificationSchema.xsd"
        xmlns:S100Base="http://www.iho.int/S100Base"
        xmlns:S100FC="http://www.iho.int/S100FC"
        targetNamespace="http://iala-aism.org/g1128/v1.3/ServiceSpecificationSchema.xsd"
        elementFormDefault="qualified" version="1.0.2" xml:lang="EN">
    <include schemaLocation="ServiceBaseTypesSchema.xsd"/>
    <!--
        At the time of writing, no official S100 schema was available online. Please use official schema and import
        like shown below.
    -->
    <!-- <import namespace="<S100 namespace>" schemaLocation="<S100.xsd>"/> -->
    <annotation>
        <documentation>
            Authors:
            EfficienSea2 WP 3 Partners
            Thomas Lutz
            Christoph Rihacek
            Josef Jahn
            Hubert Künig
        </documentation>
    </annotation>
    <annotation>
        <documentation>
            This formal description of a service specification is intentionally kept
            simple and plain.
        </documentation>
    </annotation>
    <element name="serviceSpecification" type="ServiceSpecificationSchema:ServiceSpecification">
        <annotation>
            <documentation>
                The root element of a service specification.
                Please refer to the type serviceSpecification for details.
            </documentation>
        </annotation>
    </element>
    <complexType name="ServiceSpecification">
        <annotation>
            <documentation>
                A service specification describes one dedicated service at logical level in a technology-
                Independent way.

                The service specification identifies a service by its id and version. The service specification
                refers to requirements for the service, defines a service data model at logical level,
                defines the service interface(s) and provides information about the author(s).

                Elements of a service specification are:

                - name The human readable service name. The service name shall be at maximum a one
                line brief label for the service. Newer versions of the same service
                specification shall not change the name.

                - id Globally unique identification of the service. Newer versions of the same
                service specification shall not change the id.

                - version Version of the service specification. A service specification is uniquely
                identified by its id and version. Any change in the service data model or in the
                service interface definition requires a new version of the service specification.

                - status Status of the service specification. One of the values 'provisional', 'released',
                'deprecated', 'deleted'.

                - description A human readable short description of the service. The description shall contain
                an abstract of what a service implementing this specification would actually do.
                - keywords A list of keywords associated to the service.

                - isSpatialExclusive Flag to indicate whether the service shall be “spatial exclusive”. “Spatial
                exclusiveness” means that at most one service instance of the same service
                specification and providing the same technical specification is allowed to be
                registered for any geographical area.

                - requirements Refers to requirements specifications for the service. Business requirements,
                functional and non-functional requirements shall be listed here.
                At least one requirement is mandatory.

                - authorInfos Refers to administrative information about the authors of the service. At least
                one author information is mandatory.

                - serviceInterfaces Refers to the definition of service interfaces. At least one service interface
                shall be defined.

                - serviceDataModel Mandatory reference to the definition of the logical service data model.
            </documentation>
        </annotation>
        <all>
            <element name="id" type="ServiceSpecificationSchema:ServiceIdentifier" minOccurs="1" maxOccurs="1"/>
            <element name="version" type="ServiceSpecificationSchema:ServiceVersion" minOccurs="1" maxOccurs="1"/>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="status" type="ServiceSpecificationSchema:ServiceStatus" minOccurs="1" maxOccurs="1"/>
            <element name="description" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="keywords" type="ServiceSpecificationSchema:CharacterStringList" minOccurs="0" maxOccurs="1"/>
            <element name="isSpatialExclusive" type="boolean" default="false" minOccurs="0" maxOccurs="1"/>
            <element name="requirements" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="requirement" type="ServiceSpecificationSchema:Requirement" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
            <element name="authorInfos" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="authorInfo" type="ServiceSpecificationSchema:AuthorInfo" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
            <element name="serviceDataModel" type="ServiceSpecificationSchema:ServiceDataModel" minOccurs="1" maxOccurs="1"/>
            <element name="serviceInterfaces" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="serviceInterface" type="ServiceSpecificationSchema:ServiceInterface" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
        </all>
    </complexType>
    <complexType name="Requirement">
        <annotation>
            <documentation>
                A requirement that the service specification fulfils.

                Elements of a requirement are:

                - id Globally unique requirement identification

                - name Human readable requirement name/summary. Shall not be longer than one line.

                - text The human readable requirement text. Usually formulated in form of a “shall”-statement.

                - rationale Rationale for this requirement. Textual explanation of why this requirement exists.
                Provides background information about the need of the service.

                - reference Optional information about where the requirement was originally stated. If the
                requirement comes from external documents, this attribute shall refer to this source.

                - author Optional reference(s) to administrative information about the author(s) of the
                requirement.
            </documentation>
        </annotation>
        <all>
            <element name="id" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="text" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="rationale" type="string" minOccurs="0" maxOccurs="1"/>
            <element name="reference" type="string" minOccurs="0" maxOccurs="1"/>
            <element name="authorInfos" minOccurs="0" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="authorInfo" type="ServiceSpecificationSchema:AuthorInfo" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
        </all>
    </complexType>
    <complexType name="ServiceInterface">
        <annotation>
            <documentation>
                Specification of a service interface. One service can offer several interfaces,
                e.g. both a request/response interface and a publish/subscribe interface at the same time.
                Different interfaces will usually provide different service operations.

                Elements of a serviceInterface are:

                name Human readable service interface name. The name shall be no longer than one line.

                description Human readable description of the service interface

                dataExchangePattern Message exchange pattern for the entire interface.

                Message exchange pattern can be one of
                ONE_WAY,
                REQUEST_RESPONSE,
                REQUEST_CALLBACK,
                PUBLISH_SUBSCRIBE,
                BROADCAST.

                operations Refers to the specification of service operations supported by the service
                interface. At least one operation shall be defined.

                consumerInterfaces Optional reference to an interface definition that has to be provided by the
                service consumer in order to complement the service interface.
                Especially if a publish/subscribe service interface is designed, it is
                necessary to describe what the service expects to be available on the
                subscriber side.
            </documentation>
        </annotation>
        <all>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="description" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="dataExchangePattern" minOccurs="1" maxOccurs="1">
                <simpleType>
                    <restriction base="string">
                        <enumeration value="ONE_WAY"/>
                        <enumeration value="REQUEST_RESPONSE"/>
                        <enumeration value="REQUEST_CALLBACK"/>
                        <enumeration value="PUBLISH_SUBSCRIBE"/>
                        <enumeration value="BROADCAST"/>
                    </restriction>
                </simpleType>
            </element>
            <element name="operations" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="operation" type="ServiceSpecificationSchema:Operation" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
            <element name="consumerInterface" type="ServiceSpecificationSchema:ConsumerInterface" minOccurs="0" maxOccurs="1"/>
        </all>
    </complexType>
    <complexType name="ConsumerInterface">
        <annotation>
            <documentation>
                Interface specification that is expected to be provided by the service consumer. For example,
                if a publish/subscribe service interface is designed, it is necessary to describe what the service
                expects to be available on the subscriber side.

                Elements of a consumerInterface are:

                - name Human readable interface name. The name shall be no longer than one line.

                - description Human readable description of the interface.

                - operations Refers to the specification of service operations supported by the consumer
                interface.

                At least one operation shall be defined.
            </documentation>
        </annotation>
        <all>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="description" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="operations" minOccurs="1" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="operation" type="ServiceSpecificationSchema:Operation" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
        </all>
    </complexType>
    <complexType name="Operation">
        <annotation>
            <documentation>
                Definition of a service operation. Operations allow a service consumer to interact with
                the service. An operation describes a dedicated function of the service or the consumer.

                Elements of an operation are:

                - name Human readable operation name. The name shall be no longer than one line.

                - description Human readable description of the operation.

                - returnValueType Optional definition of the return value for the operation. The return value
                could be a business object or a simple status code. The return value data type
                has to be defined in the logical service data model.

                - parameterTypes Definition of one or more parameters for the operation. This could be business
                objects or simple types. Parameters have to be defined in the logical
                service data model.
            </documentation>
        </annotation>
        <all>
            <element name="name" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="description" type="string" minOccurs="1" maxOccurs="1"/>
            <element name="returnValueType" type="ServiceSpecificationSchema:ValueTypeDataModelMapping" minOccurs="0" maxOccurs="1"/>
            <element name="parameterTypes" minOccurs="0" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="parameterType" type="ServiceSpecificationSchema:ValueTypeDataModelMapping" minOccurs="1" maxOccurs="unbounded"/>
                    </sequence>
                </complexType>
            </element>
        </all>
    </complexType>
    <complexType name="ValueTypeDataModelMapping">
        <annotation>
            <documentation>
                Definition of a data type by providing a reference into the logical service data model.
                A value type data model mapping is used either in a service operation parameter or return value.

                Elements of a valueTypeDataModelMapping are:

                - typeReference Reference to the logical service data model.
                It references a type (or element, though type is preferred) in the logical
                service model by the type's name attribute.

                - parameter Reference to a S-100 parameter. Used if service is S-100 compliant.

                - multiplicity Minimum and maximum number of provided instances, where the maximum number may be
                infinitive.
                If no multiplicity is provided a multiplicity of 1 is assumed.

                - direction Determining the direction. Can be one of:
                in
                out
                inout

                - encoding Encoding of the parameter
            </documentation>
        </annotation>
        <all>
            <element name="typeReference" type="string" minOccurs="0" maxOccurs="1"/>
            <element name="parameter" type="ServiceSpecificationSchema:S100_Parameter" minOccurs="0" maxOccurs="1"/>
            <element name="multiplicity" type="S100Base:S100_Multiplicity" minOccurs="0" maxOccurs="1"/>
            <element name="direction" minOccurs="0" maxOccurs="1">
                <simpleType>
                    <restriction base="string">
                        <enumeration value="IN "/>
                        <enumeration value="OUT"/>
                        <enumeration value="INOUT"/>
                    </restriction>
                </simpleType>
            </element>
            <element name="encoding" type="string" minOccurs="0" maxOccurs="1"/>
        </all>
    </complexType>
    <complexType name="ServiceDataModel">
        <annotation>
            <documentation>
                If the service is S-100 compliant it shall link to an existing Feature Catalogue in the
                featureCatalogue element. The other elements are then not used.
                If the service is not S-100 compliant: The serviceDataModel is formally described in the
                sub-element modelDefinition to achieve interoperability and decouple it from implementing physical
                data models described in e.g. SOAP or REST. Encodings are formally described using sub-element
                encoding. The model can either be described in-line, or existing schemata can be imported.
                One service specification has one logical service model. Sub-element modelDefinition has to be
                provided. Elements of a serviceDataModel are:
                - featureCatalogue Reference to an S-100 compliant logical data model description. To be used to
                be S-100 compliant, otherwise the modelDefinition attribute has to be used
                - modelDefinition Only used if not S-100 compliant. The definition of the service data model
                described
                - encoding Only used if not S-100 compliant. The encoding of the attribute modelDefinition
            </documentation>
        </annotation>
        <all>
            <element name="featureCatalogue" minOccurs="0" maxOccurs="1">
                <complexType>
                    <all>
                        <element ref="S100FC:S100_FC_FeatureCatalogue" minOccurs="1" maxOccurs="1"/>
                    </all>
                </complexType>
            </element>
            <element name="modelDefinition" type="string" minOccurs="0" maxOccurs="1"/>
            <element name="encoding" type="string" minOccurs="0" maxOccurs="1"/>
        </all>
    </complexType>
    <complexType name="S100_Parameter">
        <annotation>
            <documentation>
                Reference to the S-100 attribute.
            </documentation>
        </annotation>
        <all>
            <element name="type" type="S100FC:S100_FC_NamedType" minOccurs="1" maxOccurs="1"/>
        </all>
    </complexType>
</schema>
